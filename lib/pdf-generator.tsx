
import React from 'react'
import { Document, Page, Text, View, StyleSheet, Font, pdf } from '@react-pdf/renderer'

// Registrar fuentes (opcional)
Font.register({
  family: 'Inter',
  fonts: [
    { src: 'https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2' },
    { src: 'https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuI6fAZ9hiA.woff2', fontWeight: 'bold' }
  ]
})

// Estilos
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 40,
    fontFamily: 'Inter'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 30,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb'
  },
  logo: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000000'
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 20
  },
  subtitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#374151',
    marginTop: 15,
    marginBottom: 8
  },
  text: {
    fontSize: 11,
    color: '#4b5563',
    lineHeight: 1.5,
    marginBottom: 8
  },
  section: {
    marginBottom: 20
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: 'center',
    fontSize: 8,
    color: '#9ca3af',
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingTop: 10
  }
})

// Interfaces
interface PDFData {
  title: string
  type: 'travel_itinerary' | 'expense_report' | 'booking_confirmation' | 'general'
  content: {
    sections: Array<{
      title: string
      items: Array<{
        label: string
        value: string
      }>
    }>
    notes?: string[]
  }
  metadata: {
    generatedBy: string
    generatedAt: Date
    userEmail?: string
    bookingReference?: string
  }
}

// Componente del documento PDF
const SuitpaxDocument: React.FC<{ data: PDFData }> = ({ data }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <View style={styles.header}>
        <Text style={styles.logo}>Suitpax</Text>
        <View>
          <Text style={{ fontSize: 10, color: '#6b7280' }}>
            Generated: {data.metadata.generatedAt.toLocaleDateString()}
          </Text>
          {data.metadata.bookingReference && (
            <Text style={{ fontSize: 10, color: '#6b7280', marginTop: 2 }}>
              Ref: {data.metadata.bookingReference}
            </Text>
          )}
        </View>
      </View>

      <Text style={styles.title}>{data.title}</Text>

      {data.content.sections.map((section, index) => (
        <View key={index} style={styles.section}>
          <Text style={styles.subtitle}>{section.title}</Text>
          {section.items.map((item, itemIndex) => (
            <View key={itemIndex} style={{ flexDirection: 'row', marginBottom: 4 }}>
              <Text style={[styles.text, { fontWeight: 'bold', width: '40%' }]}>
                {item.label}:
              </Text>
              <Text style={[styles.text, { width: '60%' }]}>
                {item.value}
              </Text>
            </View>
          ))}
        </View>
      ))}

      {data.content.notes && data.content.notes.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.subtitle}>Important Notes</Text>
          {data.content.notes.map((note, noteIndex) => (
            <Text key={noteIndex} style={[styles.text, { marginLeft: 10 }]}>
              • {note}
            </Text>
          ))}
        </View>
      )}

      <Text style={styles.footer}>
        Generated by Suitpax AI Travel Platform • {data.metadata.generatedBy} • suitpax.com
      </Text>
    </Page>
  </Document>
)

// Función principal para generar PDF
export async function generateTravelPDF(data: PDFData): Promise<Buffer> {
  try {
    const pdfBuffer = await pdf(<SuitpaxDocument data={data} />).toBuffer()
    return pdfBuffer
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw new Error('Failed to generate PDF')
  }
}

// Funciones helper para diferentes tipos de documentos
export function createTravelItineraryData(
  bookingData: any,
  userEmail: string
): PDFData {
  return {
    title: 'Travel Itinerary',
    type: 'travel_itinerary',
    content: {
      sections: [
        {
          title: 'Traveler Information',
          items: [
            { label: 'Name', value: bookingData.passengerName || 'Not specified' },
            { label: 'Email', value: userEmail },
            { label: 'Booking Reference', value: bookingData.bookingReference || 'TBD' }
          ]
        },
        {
          title: 'Flight Details',
          items: [
            { label: 'From', value: bookingData.origin || 'Not specified' },
            { label: 'To', value: bookingData.destination || 'Not specified' },
            { label: 'Departure Date', value: bookingData.departureDate || 'Not specified' },
            { label: 'Return Date', value: bookingData.returnDate || 'One way' },
            { label: 'Passengers', value: bookingData.passengers?.toString() || '1' },
            { label: 'Class', value: bookingData.cabinClass || 'Economy' }
          ]
        }
      ],
      notes: [
        'Please arrive at the airport at least 2 hours before departure',
        'Check visa requirements for your destination',
        'Carry valid identification documents'
      ]
    },
    metadata: {
      generatedBy: 'Suitpax AI Assistant',
      generatedAt: new Date(),
      userEmail,
      bookingReference: bookingData.bookingReference
    }
  }
}

export function createExpenseReportData(
  expenses: any[],
  userEmail: string,
  period: string
): PDFData {
  const totalAmount = expenses.reduce((sum, exp) => sum + (exp.amount || 0), 0)
  
  return {
    title: `Expense Report - ${period}`,
    type: 'expense_report',
    content: {
      sections: [
        {
          title: 'Summary',
          items: [
            { label: 'Total Expenses', value: `$${totalAmount.toFixed(2)}` },
            { label: 'Number of Items', value: expenses.length.toString() },
            { label: 'Period', value: period },
            { label: 'Status', value: 'Pending Review' }
          ]
        },
        {
          title: 'Expenses',
          items: expenses.map((exp, index) => ({
            label: `${index + 1}. ${exp.description || 'Expense'}`,
            value: `$${(exp.amount || 0).toFixed(2)} - ${exp.category || 'Other'}`
          }))
        }
      ]
    },
    metadata: {
      generatedBy: 'Suitpax Expense Manager',
      generatedAt: new Date(),
      userEmail
    }
  }
              }
