import PDFDocument from "pdfkit"
import { Readable } from "stream"

interface GeneratePDFOptions {
  title: string
  content: string[]
  metadata?: {
    author?: string
    subject?: string
    keywords?: string[]
    createdAt?: Date
  }
  styling?: {
    fontSize?: {
      title?: number
      content?: number
    }
    margins?: {
      top?: number
      bottom?: number
      left?: number
      right?: number
    }
    colors?: {
      title?: string
      content?: string
    }
  }
}

export async function generatePDF({
  title,
  content,
  metadata = {},
  styling = {},
}: GeneratePDFOptions): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      // Default values
      const defaultStyling = {
        fontSize: {
          title: 24,
          content: 12,
        },
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50,
        },
        colors: {
          title: "#000000",
          content: "#333333",
        },
      }

      // Merge default styling with provided styling
      const finalStyling = {
        fontSize: { ...defaultStyling.fontSize, ...styling.fontSize },
        margins: { ...defaultStyling.margins, ...styling.margins },
        colors: { ...defaultStyling.colors, ...styling.colors },
      }

      // Create PDF document
      const doc = new PDFDocument({
        size: "A4",
        margins: finalStyling.margins,
        info: {
          Title: title,
          Author: metadata.author || "Suitpax AI",
          Subject: metadata.subject || "Travel Itinerary",
          Keywords: metadata.keywords?.join(", ") || "travel, itinerary, suitpax",
          CreationDate: metadata.createdAt || new Date(),
        },
      })

      // Collect PDF chunks
      const chunks: Buffer[] = []
      const stream = new Readable()

      // Handle document events
      doc.on("data", (chunk) => chunks.push(chunk))
      doc.on("end", () => resolve(Buffer.concat(chunks)))
      doc.on("error", (err) => reject(err))

      // Add logo
      doc.image("public/logo.png", {
        fit: [100, 100],
        align: "center",
      })
      doc.moveDown(2)

      // Add title
      doc
        .font("Helvetica-Bold")
        .fontSize(finalStyling.fontSize.title)
        .fillColor(finalStyling.colors.title)
        .text(title, { align: "center" })
        .moveDown(2)

      // Add content
      doc
        .font("Helvetica")
        .fontSize(finalStyling.fontSize.content)
        .fillColor(finalStyling.colors.content)

      content.forEach((paragraph) => {
        doc.text(paragraph, {
          align: "justify",
          lineGap: 5,
        })
        doc.moveDown()
      })

      // Add footer
      const bottomMargin = finalStyling.margins.bottom || 50
      doc
        .fontSize(8)
        .fillColor("#666666")
        .text(
          `Generated by Suitpax AI on ${new Date().toLocaleDateString()}`,
          finalStyling.margins.left,
          doc.page.height - bottomMargin,
          { align: "center" }
        )

      // Add page numbers
      const pages = doc.bufferedPageRange()
      for (let i = 0; i < pages.count; i++) {
        doc.switchToPage(i)
        doc
          .fontSize(8)
          .fillColor("#666666")
          .text(
            `Page ${i + 1} of ${pages.count}`,
            finalStyling.margins.left,
            doc.page.height - (bottomMargin - 15),
            { align: "center" }
          )
      }

      // Finalize PDF
      doc.end()
    } catch (error) {
      reject(error)
    }
  })
}

// Utility function to convert HTML-like content to plain text
export function sanitizeContent(html: string): string {
  return html
    .replace(/<[^>]*>/g, "") // Remove HTML tags
    .replace(/&nbsp;/g, " ") // Replace &nbsp; with spaces
    .replace(/\s+/g, " ") // Normalize whitespace
    .trim()
}

// Example usage:
/*
const options: GeneratePDFOptions = {
  title: "Travel Itinerary",
  content: [
    "Your upcoming trip to Barcelona",
    "Flight details...",
    "Hotel information...",
  ],
  metadata: {
    author: "Suitpax AI",
    subject: "Travel Planning",
    keywords: ["travel", "itinerary", "barcelona"],
    createdAt: new Date(),
  },
  styling: {
    fontSize: {
      title: 28,
      content: 14,
    },
    margins: {
      top: 60,
      bottom: 60,
      left: 40,
      right: 40,
    },
    colors: {
      title: "#1a1a1a",
      content: "#444444",
    },
  },
}

const pdfBuffer = await generatePDF(options)
*/